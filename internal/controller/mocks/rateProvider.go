// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	controller "github.com/irbgeo/usdt-rate/internal/controller"
	mock "github.com/stretchr/testify/mock"
)

// RateProvider is an autogenerated mock type for the rateProvider type
type RateProvider struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, in
func (_m *RateProvider) Get(ctx context.Context, in controller.Pair) (*controller.Rate, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *controller.Rate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, controller.Pair) (*controller.Rate, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, controller.Pair) *controller.Rate); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controller.Rate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, controller.Pair) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRateProvider creates a new instance of RateProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateProvider {
	mock := &RateProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
